// generated by ./../sqlpp11/sqlpp11/scripts/ddl2cpp DataStorage.sql ./DataDB DataDB
#ifndef DATADB_DATADB_H
#define DATADB_DATADB_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace DataDB
{
  namespace MainTable_
  {
    struct UserSensorName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "userSensorName";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T userSensorName;
            T& operator()() { return userSensorName; }
            const T& operator()() const { return userSensorName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct SystemSensorName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "systemSensorName";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T systemSensorName;
            T& operator()() { return systemSensorName; }
            const T& operator()() const { return systemSensorName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct SensorType
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "sensorType";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T sensorType;
            T& operator()() { return sensorType; }
            const T& operator()() const { return sensorType; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
  }

  struct MainTable: sqlpp::table_t<MainTable,
               MainTable_::UserSensorName,
               MainTable_::SystemSensorName,
               MainTable_::SensorType>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "MainTable";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T MainTable;
        T& operator()() { return MainTable; }
        const T& operator()() const { return MainTable; }
      };
    };
  };
}
#endif
