// generated by ./../sqlpp11/sqlpp11/scripts/ddl2cpp DataStorage.sql ./DataDB DataDB
#ifndef DATADB_DATADB_H
#define DATADB_DATADB_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace DataDB
{
  namespace BinaryType_
  {
    struct SystemSensorName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "systemSensorName";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T systemSensorName;
            T& operator()() { return systemSensorName; }
            const T& operator()() const { return systemSensorName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Type
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "type";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T type;
            T& operator()() { return type; }
            const T& operator()() const { return type; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct FAId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "FA_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T FAId;
            T& operator()() { return FAId; }
            const T& operator()() const { return FAId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct State
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "state";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T state;
            T& operator()() { return state; }
            const T& operator()() const { return state; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
  }

  struct BinaryType: sqlpp::table_t<BinaryType,
               BinaryType_::SystemSensorName,
               BinaryType_::Type,
               BinaryType_::FAId,
               BinaryType_::State>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "BinaryType";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T BinaryType;
        T& operator()() { return BinaryType; }
        const T& operator()() const { return BinaryType; }
      };
    };
  };
  namespace MainTable_
  {
    struct UserSensorName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "userSensorName";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T userSensorName;
            T& operator()() { return userSensorName; }
            const T& operator()() const { return userSensorName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct SystemSensorName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "systemSensorName";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T systemSensorName;
            T& operator()() { return systemSensorName; }
            const T& operator()() const { return systemSensorName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct SensorType
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "sensorType";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T sensorType;
            T& operator()() { return sensorType; }
            const T& operator()() const { return sensorType; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
  }

  struct MainTable: sqlpp::table_t<MainTable,
               MainTable_::UserSensorName,
               MainTable_::SystemSensorName,
               MainTable_::SensorType>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "MainTable";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T MainTable;
        T& operator()() { return MainTable; }
        const T& operator()() const { return MainTable; }
      };
    };
  };
  namespace ManyStatesType_
  {
    struct SystemSensorName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "systemSensorName";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T systemSensorName;
            T& operator()() { return systemSensorName; }
            const T& operator()() const { return systemSensorName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Type
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "type";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T type;
            T& operator()() { return type; }
            const T& operator()() const { return type; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct FAId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "FA_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T FAId;
            T& operator()() { return FAId; }
            const T& operator()() const { return FAId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct State
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "state";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T state;
            T& operator()() { return state; }
            const T& operator()() const { return state; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
  }

  struct ManyStatesType: sqlpp::table_t<ManyStatesType,
               ManyStatesType_::SystemSensorName,
               ManyStatesType_::Type,
               ManyStatesType_::FAId,
               ManyStatesType_::State>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "ManyStatesType";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T ManyStatesType;
        T& operator()() { return ManyStatesType; }
        const T& operator()() const { return ManyStatesType; }
      };
    };
  };
  namespace MonitorType_
  {
    struct SystemSensorName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "systemSensorName";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T systemSensorName;
            T& operator()() { return systemSensorName; }
            const T& operator()() const { return systemSensorName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Type
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "type";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T type;
            T& operator()() { return type; }
            const T& operator()() const { return type; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct FAId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "FA_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T FAId;
            T& operator()() { return FAId; }
            const T& operator()() const { return FAId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct State
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "state";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T state;
            T& operator()() { return state; }
            const T& operator()() const { return state; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
  }

  struct MonitorType: sqlpp::table_t<MonitorType,
               MonitorType_::SystemSensorName,
               MonitorType_::Type,
               MonitorType_::FAId,
               MonitorType_::State>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "MonitorType";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T MonitorType;
        T& operator()() { return MonitorType; }
        const T& operator()() const { return MonitorType; }
      };
    };
  };
}
#endif
